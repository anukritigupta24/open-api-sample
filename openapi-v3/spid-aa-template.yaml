#
# Template file per Attribute Authority che autentica:
#  - tramite MODI
#  - tramite MODI-BIS
#  - tramite UserConsent
#
x-commons:
  ratelimit-headers: &ratelimit-headers
    X-RateLimit-Limit:
      $ref: '#/components/headers/X-RateLimit-Limit'
    X-RateLimit-Remaining:
      $ref: '#/components/headers/X-RateLimit-Remaining'
    X-RateLimit-Reset:
      $ref: '#/components/headers/X-RateLimit-Reset'
  common-responses: &common-responses
    '403':
      $ref: >-
        #/components/responses/403Forbidden
    '400':
      $ref: '#/components/responses/400BadRequest'
    '429':
      $ref: '#/components/responses/429TooManyRequests'
    '503':
      $ref: '#/components/responses/503ServiceUnavailable'
    default:
      $ref: '#/components/responses/default'
openapi: 3.0.3
info:
  version: "1.0.0"
  title: |-
    Patente AA.
  x-summary: >-
    Fornisce l'attributo patente di guida.
  description: |
    Documentazione
    ...
  x-spid:
    # Questa sezione è obbligatoria §2.1
    aa-version: 1.0.0
    aa-home: https://aa.example/patente/v1/ui/openapi.yaml
    aa-registry: https://spid.gov.it/aa/registry/patente/v1/openapi.yaml
  termsOfService: 'http://swagger.io/terms/'
  # Chi posso contattare per informazioni sul servizio e sul suo stato?
  contact:
    email: robipolli@gmail.com
    name: Roberto Polli
    url: https://twitter.com/ioggstream
  # L'audience delle API. Attualmente e' definito solamente
  #   la tipologia `public`.
  x-audience:
    - public
  # Ogni API deve avere un UUID, invariante nel tempo e
  #   rispetto al `title`.
  x-api-id: 00000000-0000-0000-0000-000000000000
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
# Una lista di `tag` utili a raggruppare le varie operazioni
#   eseguite dalle API. Ogni `tag` puo' referenziare un link
#   alla sua descrizione.
tags:
  - name: public
    description: Retrieve informations v. §2.7
    externalDocs: &lg-spid-aa
      description: Linee Guida Spid AA
      url: https://agid.gov.it/riferimento-lg-spid-aa
  - name: protected
    description: Accesso permesso per enti e SP convenzionati, v. §2.7
    externalDocs:
      <<: *lg-spid-aa
  - name: private
    description: Accesso previo consenso v. §2.7
    externalDocs:
      <<: *lg-spid-aa
servers:
  - description: |-
      I server devono rispettare una serie di indicazioni
    url: https://aa.example/patente/v1

  - description: Development server
    url: https://localhost:8443/patente/v1
#
# Qui vanno tutti i path.
#
paths:
  /patente/{tax_code}:
    get:
      parameters:
      - name: tax_code
        in: path
        required: true
        schema:
          type: string
          description: |-
            il codice fiscale del soggetto
      summary: Ritorna gli attributi delle patenti di una persona.
      description: |
        Ritorna gli attributi relativi al codice fiscale passato
        in accordo con il profilo di accesso (security scope).

        Esempio 1: una PA richiede accesso agli attributi avendo
          nell'Access Token il solo scope `validate_patente`.
          In questo caso, il server ritorna solamente `true` eventualmente
          incapsulato in un JWT, ad indicare
          che il soggetto è in possesso di una patente di guida di tipo "B"
          ```
          {"items": [{"tipo": "B", "valida": true}]}
          ```

        Esempio 2: una PA richiede accesso agli attributi avendo
          nell'Access Token lo scope `read_patente`.
          In questo caso, il server ritorna tutti i dati eventualmente
          incapsulati in un JWT
          ```
          {"items":  [{"tipo": "B", "valida": true, "patente": "UA000111222333W"}]}
          ```
      operationId: get_patente
      security:
      - UserConsentOIDC: [read_patente, validate_patente, openid, profile]
      - ID_AUTH_REST_01: [read_patente, validate_patente]
      - UserConsent: [read_patente, validate_patente]
      tags:
        - protected
        - private
      responses:
        <<: *common-responses
        '200':
          description: |
            Il server ritorna gli attributi.
          headers:
            <<: *ratelimit-headers
          content:
            application/json:
              schema:
                properties:
                  items:
                    type: array
                    maxItems: 10
                    minItems: 0
                    items:
                      $ref: '#/components/schemas/Patente'
  /status:
    get:
      summary: Ritorna lo stato dell'applicazione.
      description: |
        Ritorna lo stato dell'applicazione. A scopo
        di test, su base randomica puo' ritornare
        un errore.
      operationId: get_status
      tags:
        - public
      responses:
        <<: *common-responses
        '200':
          description: |
            Il server ha ritornato lo status. In caso di problemi
            ritorna sempre un problem+json.
          # Questi header di throttling sono obbligatori e definiti
          #   nel Nuovo modello di interoperabilità.
          headers:
            <<: *ratelimit-headers
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
components:
  securitySchemes:
    ID_AUTH_REST_01:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |-
        A JWT signed with a trusted key.
        A process to identify trusted keys must be defined.
    POND:
      type: oauth2
      description: |-
        This API uses OAuth 2 with the clientCredentials flow
        with a specific authorization server.
      flows:
        clientCredentials:
          tokenUrl: https://pond.example/oauth2/tokenUrl
          scopes:
            read_patente: read full data
            validate_patente: validate only
    UserConsent:
      type: oauth2
      description: |-
        This API uses OAuth 2 with the clientCredentials flow with PKCE.
        The behavior
      flows:
        authorizationCode:
          authorizationUrl: https://aa.example/patente/v1/authorization
          tokenUrl: https://aa.example/patente/v1/token
          scopes:
            read_patente: read full data
            validate_patente: validate only
    UserConsentOIDC:
      type: openIdConnect
      openIdConnectUrl: https://aa.example/.well-known/openid-configuration
      description: |-
        In the OIDC Connect URL we must provide:
        - scopes

  examples:
    403Forbidden:
      summary: §2.3 Consenso non fornito
      value:
        title: Forbidden
        status: 403
        detail: Consent Required
        instance: https://aa.example/authorization
  headers:
    Cache-Control:
      schema:
        type: string
    X-RateLimit-Limit:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/headers/X-RateLimit-Limit'
    X-RateLimit-Remaining:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/headers/X-RateLimit-Remaining'
    X-RateLimit-Reset:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/headers/X-RateLimit-Reset'
    Retry-After:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/headers/Retry-After'

  responses:
    # Predefined error codes for this API
    403Forbidden:
      description: |-
        Questa risposta viene data ad un SP quando gli attributi
        sono accessibili solo previo consenso
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            403Forbidden:
              $ref: '#/components/examples/403Forbidden'
    400BadRequest:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/400BadRequest'
    404NotFound:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/404NotFound'
    429TooManyRequests:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/429TooManyRequests'
    503ServiceUnavailable:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/503ServiceUnavailable'
    default:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/responses/default'

  schemas:
    JWTAuthentication:
      type: object
      properties:
        iss:
          type: string
          format: url

    XSpid:
      type: object
      required:
        - aa-version
        - aa-home
        - aa-registry
      properties:
        aa-version:
          type: string
          example: 1.0.0
        aa-home:
          type: string
          format: url
        aa-registry:
          type: string
          format: url
    Problem:
      $ref: 'https://teamdigitale.github.io/openapi/0.0.7/definitions.yaml#/schemas/Problem'
    Patente:
      type: object
      description: Patente di guida
      externalDocs:
        url: http://www.mit.gov.it/documentazione/patenti-di-guida-informazioni-riconoscimento-sostituzione-relative-alla-patente-di
      properties:
        valida:
          type: boolean
        tipo:
          type: string
          enum: ["A", "B", "C", "D"]
        patente:
          type: string
          description: |-
            Il pattern di validazione delle patenti è qui http://www.mit.gov.it/normativa/Circolare_protocollo_30039_24-10-2011
          pattern: "UI[A-Z0-9]+"
        emessa_il:
          type: string
          format: date-time
          example: '2018-12-30T12:23:32Z'
